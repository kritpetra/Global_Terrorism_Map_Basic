{
    "contents" : "\n\n########## FUNCTION: Create popups ##########\n\ncreateInfoPopup <- function(yearData){\n\n     #         Smaller functions: create text vectors given a vector of row\n     #         indices given in parent -------------\n     EventId_Text <- function(){\n          mapply(gsub, \"000000000000\", yearData$eventid,\n                 \"<b>Event ID:</b> 000000000000\")\n     }\n     Year_Text <- function(){\n          mapply(gsub, \"[%]\", yearData$iyear,\"<b>Year:</b> %\")\n     }\n     Date_Text <- function(){\n          datetext <- mapply(paste, yearData$imonth, yearData$iday,\n                             yearData$iyear, sep=\"/\")\n          mapply(gsub, \"[%]\", datetext,\"<b>Date:</b> %\")\n     }\n     Summary_Text <- function(){\n          return(yearData$summary)\n     }\n     Place_Text <- function(){\n          paste0('<b>Location: </b>', yearData$city, ', ' ,\n                 yearData$country_txt)\n     }\n     AddNotes_Text <- function(){\n          return(yearData$addnotes)\n     }\n     Target_Text <- function(){\n          mapply(gsub, \"[%]\", yearData$target1, \"<b>Target:</b> %\")\n     }\n     Group_Text <- function(){\n          mapply(gsub, \"[%]\", yearData$gname, \"<b>Group name:</b> %\")\n     }\n     Motive_Text <- function() {\n          mapply(gsub, '[%]', yearData$motive, '<b>Motive:</b> %')\n     }\n     Killed_Text <- function(){\n          mapply(gsub, \"[%]\", yearData$nkill, \"<b>Deaths:</b> %\")\n     }\n     Wounded_Text <- function(){\n          mapply(gsub, \"[%]\", yearData$nwound, \"<b>Wounded:</b> %\")\n     }\n     AttackT_Text <- function(){\n          mapply(gsub, \"[%]\", yearData$attacktype1_txt, \"<b>Attack type:</b> %\")\n     }\n     TargetT_Text <- function(){\n          mapply(gsub, \"[%]\", yearData$targtype1_txt, \"<b>Target type:</b> %\")\n     }\n     Weapon_Text <- function(){\n          mapply(gsub, \"[%]\", yearData$weaptype1_txt, \"<b>Weapon type:</b> %\")\n     }\n     WeaponT_Text <- function(){\n          weaponsubtypetext <- mapply(gsub, \"[%]\", yearData$weaptype1_txt,\n                                      \"<b>Weapon type:</b> % (#)\")\n          mapply(gsub, \"[#]\", yearData$weapsubtype1_txt, weaponsubtypetext)\n     }\n     Link_Text <- function(){\n          mapply(gsub, \"[%]\", yearData$eventid,\n                 \"<a href='http://www.start.umd.edu/gtd/search/IncidentSummary.aspx?gtdid=%'>\n                 Database entry for this event.</a>\")\n     }\n\n     #         Concats text variables  ------\n\n     return(paste(\n          EventId_Text(), Date_Text(), Place_Text(),\n          Group_Text(), Target_Text(), #Motive_Text(),\n          AttackT_Text(), WeaponT_Text(),\n          Killed_Text(), Wounded_Text(),\n          Summary_Text(), Link_Text(),\n          sep=\"<br/>\"))\n\n     #    End of function ----\n     }\n\n########## FUNCTION: create color vector, given values ############\n\ngetColor <- function(variable, data, year, region){\n\n     values <- data[[variable]]\n\n     if(any(variable %in% c(\"LifeExpectancy\", \"UnderFiveMortality\", \"ChildrenPerWoman\", \"HDI\"))) {\n          lower <- min(regionData[regionData$Year == year, variable],\n                       na.rm = TRUE)\n          upper <- max(regionData[regionData$Year == year, variable],\n                       na.rm = TRUE)\n          if(lower == Inf) return(\"#808080\")\n\n          pal <<- colorNumeric(\"YlGnBu\", c(lower, upper))\n          variableScale <<- values\n     }\n\n     else if (any(variable %in% c(\"TotalPopulation\", \"GDPPerCapita\"))) {\n          lower <- min(log(regionData[regionData$Year == year, variable]+0.1),\n                       na.rm = TRUE)\n          upper <- max(log(regionData[regionData$Year == year, variable]+0.1),\n                       na.rm = TRUE)\n          if(lower == Inf) return(\"#808080\")\n\n          pal <<- colorNumeric(\"YlGnBu\", c(lower, upper))\n          variableScale <<- log(values+0.1)\n\n     }\n\n     else if (any(variable %in% c(\"NumIncidents\",\"NumWounded\",\"NumFatalities\"))){\n          lower <- min(log(regionData[regionData$Year == year, variable]+1),\n                       na.rm = TRUE)\n          upper <- max(log(regionData[regionData$Year == year, variable]+1),\n                       na.rm = TRUE)\n          if(lower == Inf) return(\"#808080\")\n\n          pal <<- colorNumeric(heat.colors(99), c(-lower,-upper))\n          variableScale <<- -log(values+1)\n\n     }\n\n     else if ( variable == \"Religion\") {\n          pal <<- colorFactor(\n               c(\"gold\", \"#CFB53B\", \"#F3E5AB\", \"#009900\", \"forestgreen\", \"#4CBB17\", \"deepskyblue\", \"maroon\", \"darkorange\", \"lightgrey\"),\n               c(\"Christian (Catholic)\", \"Christian (Orthodox)\", \"Christian (Other)\", \"Muslim (Other)\", \"Muslim (Sunni)\", \"Muslim (ShiÊ¿a)\", \"Jewish\", \"Hindu\", \"Buddhist\", \"None/Other\"),\n               ordered=TRUE\n          )\n          variableScale <<- values\n\n     }\n\n     else if (any(variable %in% c(\"MilXpnd\"))) {\n          lower <- min(log(regionData[regionData$region == region, variable]+0.01),\n                       na.rm = TRUE)\n          upper <- max(log(regionData[regionData$region == region, variable]+0.01),\n                       na.rm = TRUE)\n          if(lower == Inf) return(\"#808080\")\n\n          pal <<- colorNumeric(\"YlGnBu\", c(lower,upper))\n          variableScale <<- log(values+0.01)\n\n     }\n\n     pal(variableScale)\n\n}\n\n\n\nshinyServer(function(input, output) {\n\n     #initialize Data -- skip when testing\n     if(!(exists('regionData') & exists('regionInfo'))) source(\"initialize.R\")\n\n     filteredData <- reactive({\n          terrorismData\n     })\n\n     ###############################################################################\n     ############################ Creating the Maps ################################\n     ###############################################################################\n\n     #    Main functions ----\n     createMap <- function(){\n\n          leaflet()  %>%\n               addTiles('http://services.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}.png')\n     }\n\n     updateShapes <- function(){\n\n          leafletProxy('Map') %>%\n               removeControl('legend') %>%\n               clearShapes()\n\n          if ( input$showCountries) {\n               regionName <- regionInfo[input$region,]$Name\n\n               regionEvents <- reactive({\n                    filteredData()[filteredData()$iyear == input$year &\n                                        filteredData()$region2 == regionName,]\n               })\n\n               mapdata <- reactive({\n                    regionData[regionData$Year == input$year &\n                                    (regionData$Country %in% worldshapes$admin[worldshapes$region_wb == regionName]),]\n               })\n\n               mapshapes <- worldshapes[worldshapes$region_wb == regionName,]\n\n\n\n\n\n               #         Renders country shapes\n               leafletProxy('Map') %>%\n                    addPolygons(\n                         data = mapshapes, layerId = ~admin,\n                         weight = 2, fillColor = getColor(input$countryVar, mapdata(), input$year, input$region),\n                         color = \"black\", fillOpacity = 0.7) %>%\n                    addLegend(\"bottomleft\", pal = pal, values = variableScale,\n                              opacity = 0.7,\n                              labFormat = labelFormat( transform =\n                                                            ifelse(\n                                                                 any( input$countryVar %in% c(\"TotalPopulation\", \"GDPPerCapita\", \"MilXpnd\", \"NumIncidents\", \"NumFatalities\", \"NumWounded\") ) ,\n                                                                 exp,\n                                                                 identity),\n                                                       digits = 3),\n                              title = input$countryVar, layerId = 'legend')\n\n          }\n     }\n\n     updateMarkers <- function(){\n\n          if(!input$freezeMarkers) leafletProxy('Map') %>% clearMarkers()\n\n          regionName <- regionInfo[input$region,]$Name\n\n          regionEvents <- reactive({\n               filteredData()[filteredData()$iyear == input$year &\n                                   filteredData()$region2 == regionName,]\n          })\n\n          mapdata <- reactive({\n               regionData[regionData$Year == input$year &\n                               (regionData$Country %in% worldshapes$admin[worldshapes$region_wb == regionName]),]\n          })\n\n          mapshapes <- worldshapes[worldshapes$region_wb == regionName,]\n\n          if(input$showIncidents) {\n\n               #         Checks if there are any events for that year and breaks if there aren't any\n               if(nrow(regionEvents()) == 0) return()\n\n               #         Renders markers if there are\n               leafletProxy('Map') %>% addCircleMarkers(\n                    lng=regionEvents()$longitude, lat=regionEvents()$latitude,\n                    color = \"red\", opacity = .2, weight = 7,\n                    fillColor = \"yellow\", fillOpacity = .7,\n                    radius = ifelse(regionEvents()$nkill+regionEvents()$nwound == 0,\n                                    0,\n                                    (regionEvents()$nkill + regionEvents()$nwound/4) %>%\n                                         log() %>% multiply_by(3)),\n                    popup=createInfoPopup(regionEvents())\n               )\n\n          }\n     }\n     updateRegion <- function(){\n\n          region <- regionInfo[input$region,]\n\n          leafletProxy('Map') %>%\n               clearControls() %>%\n               clearMarkers() %>%\n               clearShapes() %>%\n               setView(region$X, region$Y, zoom = region$Z) %>%\n               addControl({\n                    \"<center><h4>Mouseover a country for more information.</h4></center>\"},\n                    position = 'topright',\n                    layerId = 'CountryInfo', classes = 'info'\n               )\n\n     }\n\n     #    Create blank map\n     output$Map <- renderLeaflet({\n          createMap()\n     })\n\n     #    Updates polygons and markers whenever year changes\n     observeEvent({input$year}, {\n          if(!input$freezeShapes) updateShapes()\n          updateMarkers()\n     })\n\n     #    Updates polygons whenever options change\n     observeEvent({input$countryVar; input$freezeShapes}, {\n          if(!input$freezeShapes) updateShapes()\n     })\n\n     #    Reloads everything when new region selected\n     observeEvent({input$region}, {\n          updateRegion()\n          updateShapes()\n          updateMarkers()\n     })\n\n     observeEvent(input$showCountries, {\n          if (!input$showCountries) leafletProxy('Map') %>% clearShapes() %>% removeControl('legend')\n          else updateShapes()\n     })\n     observeEvent(input$showIncidents, {\n          if (!input$showIncidents) leafletProxy('Map') %>% clearMarkers()\n          else updateMarkers()\n     })\n\n     ###############################################################################\n     ##################### Creating the Information Box ############################\n     ###############################################################################\n\n     # Main function\n     createInfoBox <- function(overId){\n\n          if(overId %>% is.null()) return(\n               \"<center><h4>Mouseover a country for more information.</h4></center>\"\n          )\n\n          dataset <- regionData[regionData$Country == overId &\n                                     regionData$Year == input$year,]\n\n          paste0(\n               paste0(\"<center><h3>\", overId, \", \", input$year, \"</h3></center><br/>\"),\n               \"<table style='width: 50%; display:inline-block;' align='right'>\n               <tr><td colspan='2'><center><h4>Country Information</h4></center></td>\",\n               createTextRow(dataset, \"Population\", \"TotalPopulation\"),\n               createTextRow(dataset, \"GDP Per Capita\", \"GDPPerCapita\", \"fixed PPP$\"),\n               createTextRow(dataset, \"Life Expectancy\", \"LifeExpectancy\"),\n               createTextRow(dataset, \"Child mortality\", \"UnderFiveMortality\", \"deaths per 1000 births\"),\n               createTextRow(dataset, \"Fertility Rate\", \"ChildrenPerWoman\", \"children per woman\"),\n               createTextRow(dataset, 'HDI', \"HDI\", 'last available data'),\n               createTextRow(dataset, 'Military Expenditure', \"MilXpnd\", 'percent of GDP'),\n               \"</table>\",\n\n               \"<table style='width: 50%; display:inline-block' align='left'>\n               <tr><td colspan='2'><center><h4>Terrorism Details</h4></center></td>\",\n               createTextRow(dataset, \"Number of attacks\", \"NumIncidents\"),\n               createTextRow(dataset, \"Fatalities\", \"NumFatalities\"),\n               createTextRow(dataset, \"Injuries\", \"NumWounded\"),\n               createTextRow(dataset, \"Percent successful\", \"PctSuccess\"),\n               createTextRow(dataset, \"Deaths per incident\", \"FatalPerInc\"),\n               \"</table>\",\n\n\n\n               \"<br/>\",\n               \"<table style='width: 90%;' align='left'>\",\n               createTextRow(dataset, \"Dominant religious identity\", \"ReligionDetail\"),\n               \"</table>\"\n          )\n\n     }\n\n     #    Smaller helper function for creating individual rows\n     createTextRow <- function(dataset, varname, var, explanation = \"\"){\n          vardata <- dataset[[var]]\n          paste0(\"<tr><td style='white-space:nowrap'><p class='cell'><b>\",\n                 varname, '<br/><small>', explanation, '</small></p>',\n                 \"</b></td> <td style='white-space:normal'><p class='numbercell'>\",\n                 format(vardata, big.mark = \",\", digits = 5, nsmall = 0),\n                 \"</p></td></tr>\" )\n     }\n\n     #    Renders information box when\n     observeEvent(input$Map_shape_mouseover, {\n          CountryOver <- input$Map_shape_mouseover\n\n          leafletProxy('Map')  %>%\n               removeControl('CountryInfo') %>%\n               addControl({\n                    createInfoBox(CountryOver$id)},\n                    position = 'topright',\n                    layerId = 'CountryInfo', classes = 'info'\n               )\n\n     })\n\n\n\n\n     output$sidebarText <- renderText({\"\n          <div style='padding:1em'>\n               Click on an incident for more details, or\n               search the <a href='http://www.start.umd.edu/gtd/search/BrowseBy.aspx'>\n               Global Terrorism database</a>.\n          </div>\n\n          <div style='padding:1em'>\n               <b>Note:</b> The locations of some incidents had to be estimated\n               with the <a href='http://www.geonames.org/'>GeoNames database</a>.\n               As a result, a few markers may appear in weird places!\n          </div>\n\n          <div style='padding:1em'>\n               More resources for instructors: <a href=''>Stats2Labs</a>.\n</div>\n          \"})\n\n})\n\n",
    "created" : 1435683308727.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "580729841",
    "id" : "6DDCDD7B",
    "lastKnownWriteTime" : 1436383802,
    "path" : "~/graphics/Krit/GTD regions simple/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}